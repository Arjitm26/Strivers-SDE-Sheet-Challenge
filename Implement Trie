/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class trieNode{

    public:

    char data;

    trieNode *children[26];

    bool isTerminal;

    trieNode(char ch){

        data=ch;

        for(int i=0; i<26; i++){

            children[i]=NULL;

        }

        isTerminal=false;

    }

};


class Trie {

    trieNode* root;

public:

    Trie() {

       root=new trieNode('\0');

    }

    void insertutil(Trie* root,string word){
        if(word.length() == 0){
            root->isterminal = true;
            return;
        }

        int index = word[0] - 'a';
        Trie* child;

        if(root->arr[index] == NULL){
            child = new Trie(word[0]);
            root->arr[index] = child;
        }
        else{
            child = root->arr[index];
        }

        insertutil(child,word.substr(1));
    }

    bool searchutil(Trie* root,string word){
        if(root->isterminal == true){
            return true;
        }

        int index = word[0] - 'a';
        
        if(root->arr[index] == NULL){
            return false;
        }

        return searchutil(root->arr[index],word.substr(1));
    }

    bool startsutil(Trie* root,string word){
        if(word.length() == 0){
            return true;
        }

        int index = word[0] - 'a';

        if(root->arr[index] == NULL){
            return false;
        }

        return startsutil(root->arr[index],word.substr(1));
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        insertutil(root,word);
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        return searchutil(root,word);
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        return startsutil(root,prefix);
    }
};
