/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* merge(Node* n1,Node* n2){
	
	Node* head = new Node(-1);
	Node* temp = head;
	Node* head1 = n1;
	Node* head2 = n2;
	n1->next = NULL;
	n2->next = NULL;

	while(head1 != NULL && head2 != NULL){
		if(head1->data <= head2->data){
			temp->child = head1;
			temp = head1;
			head1 = head1->child;
		}
		else{
			temp->child = head2;
			temp = head2;
			head2 = head2->child;
		}
	}

	if(head1){
		temp->child = head1;
	}
	else{
		temp->child = head2;
	}

	return head->child;
	
}
Node* flattenLinkedList(Node* head) 
{
	if(head == NULL || head->next == NULL) return head;
	return merge(head,flattenLinkedList(head->next));
}
